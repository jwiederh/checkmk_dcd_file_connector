stages:
  - test
  - qa
  - package
  - release


variables:
  MKP_FILENAME: 'fileconnector-${CI_COMMIT_REF_SLUG}.mkp'


pylint:
  stage: qa
  needs: []
  image: python:3-slim
  before_script:
    - pip install pylint
  script:
    - pylint lib/check_mk/cee/dcd/plugins/connectors/fileconnector.py web/plugins/wato/fileconnector.py
  allow_failure: true


flake8:
  stage: qa
  needs: []
  image: python:3-slim
  before_script:
    - pip install flake8
  script:
    - flake8 lib/check_mk/cee/dcd/plugins/connectors/fileconnector.py web/plugins/wato/fileconnector.py
  allow_failure: true


run tests:
  stage: test
  image: python:3
  before_script:
    - pip install pytest pytest-cov
  script:
    - pytest tests/
    - coverage xml
  artifacts:
    reports:
      junit: coverage.xml


render info:
  stage: test
  image: python:3-slim
  variables:
    VERSION: $CI_COMMIT_REF_SLUG
  before_script:
    - pip install markdown
  script:
    - echo "Rendering for version ${VERSION}"
    # Fill the template with our data
    - python create_package_metadata.py
    # Converting info into info.json
    - python -c 'import json; f = open("info"); exec("j=%s" % f.read()); fj = open("info.json", "w"); json.dump(j, fj)'
  artifacts:
    paths:
      - info
      - info.json
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        VERSION: $CI_COMMIT_TAG
    - when: always


create mkp:
  stage: package
  needs:
    - run tests
    - job: render info
      artifacts: true
  image: alpine
  only:
    - tags
    - api
    - web
  script:
    # Creating required tar files
    - tar -cv -C lib/ -f lib.tar check_mk/
    - tar -cv -C web/ -f web.tar plugins/wato/
    # Packing the final archive
    - tar -czvf ${MKP_FILENAME} info info.json lib.tar web.tar
    # Save address for reference during release
    - echo "ARTIFACT_JOB_URL=${CI_JOB_URL}/artifacts/raw/${MKP_FILENAME}?inline=false" >> variables.env
  artifacts:
    paths:
      - ${MKP_FILENAME}
    reports:
      dotenv: variables.env


create release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: create mkp
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo 'Creating release for $CI_COMMIT_TAG'
  release:
    tag_name: '$CI_COMMIT_TAG'
    description: 'Automatically created through release-cli'
    assets:
      links:
        - name: '${MKP_FILENAME}'
          url: '${ARTIFACT_JOB_URL}'
          filepath: '/${MKP_FILENAME}'  # nice download URL
          link_type: 'package'
